"""Data writer module for the Firstbase AI Challenge."""

import json
from pathlib import Path
from typing import Any
import pandas as pd
import logging
from .config import DEFAULT_CONFIG

logger = logging.getLogger(__name__)


class DataWriter:
    """Data writer class for handling JSON output of rules and cleaned data."""

    def __init__(self, output_dir: str | None = None):
        """
        Initialize the DataWriter.

        Args:
            output_dir: Directory to save output files
        """
        self.output_dir = Path(output_dir or DEFAULT_CONFIG.data.output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def write_rules_to_json(
        self, rules: list[dict[str, Any]], filename: str | None = None
    ) -> Path:
        """
        Write cleaning rules to a JSON file.

        Args:
            rules: List of cleaning rules
            filename: Name of the output file

        Returns:
            Path to the written file
        """
        output_path = self.output_dir / (filename or DEFAULT_CONFIG.data.rules_filename)

        # Add metadata to the rules
        rules_with_metadata = {
            "metadata": {
                "total_rules": len(rules),
                "generated_at": pd.Timestamp.now().isoformat(),
                "description": "Data cleaning rules generated by Firstbase AI Challenge",
            },
            "rules": rules,
        }

        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(rules_with_metadata, f, indent=2, ensure_ascii=False)

        logger.info(f"Rules written to {output_path}")
        return output_path

    def write_cleaned_data_to_csv(
        self, data: pd.DataFrame, filename: str | None = None
    ) -> Path:
        """
        Write cleaned data to a CSV file.

        Args:
            data: Cleaned DataFrame
            filename: Name of the output file

        Returns:
            Path to the written file
        """
        output_path = self.output_dir / (
            filename or DEFAULT_CONFIG.data.cleaned_data_filename
        )
        data.to_csv(output_path, index=False)

        logger.info(f"Cleaned data written to {output_path}")
        return output_path

    def write_metrics_to_json(
        self, metrics: dict[str, Any], filename: str | None = None
    ) -> Path:
        """
        Write cleaning metrics to a JSON file.

        Args:
            metrics: Dictionary of cleaning metrics
            filename: Name of the output file

        Returns:
            Path to the written file
        """
        output_path = self.output_dir / (
            filename or DEFAULT_CONFIG.data.metrics_filename
        )

        # Add timestamp to metrics
        metrics_with_timestamp = {
            "timestamp": pd.Timestamp.now().isoformat(),
            "metrics": metrics,
        }

        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(metrics_with_timestamp, f, indent=2, ensure_ascii=False)

        logger.info(f"Metrics written to {output_path}")
        return output_path
